{"version":3,"sources":["apiKeys.js","forcast.js","images/WeatherIcons.gif","currentLocation.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","key","base","Forcast","props","useState","query","setQuery","error","setError","weather","setWeather","search","city","axios","get","apiKeys","then","response","data","catch","console","log","message","defaults","useEffect","className","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","onClick","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","dateBuilder","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","Weather","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","description","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","a","fetch","api_call","json","setState","this","position","coords","latitude","longitude","err","alert","timerID","setInterval","clearInterval","Fragment","id","format","interval","ticking","Date","loader","style","width","WebkitUserDrag","fontSize","fontWeight","marginTop","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a13242cc.chunk.js","sourcesContent":["\nmodule.exports = {\n  key: \"89f3768a29fdc40cd0f685828ab5bace\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n","import React, { useState, useEffect, Component } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = (city) => {\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${\n          city != \"[object Object]\" ? city : query\n        }&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setQuery(\"\");\n      })\n      .catch(function (error) {\n        console.log(error);\n        setWeather(\"\");\n        setQuery(\"\");\n        setError({ message: \"Not Found\", query: query });\n      });\n  };\n  function checkTime(i) {\n    if (i < 10) {\n      i = \"0\" + i;\n    } // add zero in front of numbers < 10\n    return i;\n  }\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  useEffect(() => {\n    search(\"Cork\");\n  }, []);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n          />\n          <div className=\"img-box\">\n            {\" \"}\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              onClick={search}\n            />\n          </div>\n        </div>\n        <ul>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              {\" \"}\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}Â°c ({weather.weather[0].main})\n                </span>\n              </li>\n          \n          \n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.humidity)}%\n                </span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility)} mi\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <li>\n              {error.query} {error.message}\n            </li>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\nexport default Forcast;\n","export default __webpack_public_path__ + \"static/media/WeatherIcons.c90d089e.gif\";","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\n\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        //If user allow location service then will fetch data & send it to get-weather function.\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          //If user denied location service then standard location weather will le shown on basis of latitude & latitude.\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"location not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n  getWeather = async (lat, lon) => {\n    const api_call = await fetch(\n      `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n    );\n    const data = await api_call.json();\n    this.setState({\n      lat: lat,\n      lon: lon,\n      city: data.name,\n      temperatureC: Math.round(data.main.temp),\n      temperatureF: Math.round(data.main.temp * 1.8 + 32),\n      humidity: data.main.humidity,\n      main: data.weather[0].main,\n      country: data.sys.country,\n    \n    });\n    switch (this.state.main) {\n      case \"Haze\":\n        this.setState({ icon: \"CLEAR_DAY\" });\n        break;\n      case \"Clouds\":\n        this.setState({ icon: \"CLOUDY\" });\n        break;\n      case \"Rain\":\n        this.setState({ icon: \"RAIN\" });\n        break;\n      case \"Snow\":\n        this.setState({ icon: \"SNOW\" });\n        break;\n      case \"Dust\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      case \"Drizzle\":\n        this.setState({ icon: \"SLEET\" });\n        break;\n      case \"Fog\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Smoke\":\n        this.setState({ icon: \"FOG\" });\n        break;\n      case \"Tornado\":\n        this.setState({ icon: \"WIND\" });\n        break;\n      default:\n        this.setState({ icon: \"CLEAR_DAY\" });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              {\" \"}\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n           \n            </div>\n            \n            <div className=\"date-time\">\n            \n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                \n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                 {this.state.temperatureC}Â°<span>C</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main}   />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img src={loader} style={{ width: \"50%\", WebkitUserDrag: \"none\" }} />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location wil be displayed on the App <br></br> & used\n            for calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React, { useState } from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}